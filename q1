import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

def f(t,x):
    return np.array(
        [x[1],-x[0]*np.cos(2*t)/2]
    )

def RK( a,
        b ,
        x0,
        m
):
    """
    Given a ODE system consisting of n equations with each initial values:

    : a: initial value from interval [a,b]
    : b: last value from interval [a,b]
    : y0: list where the entries are the initial conditions
    : m: number of partition of the interval
    : 2D numpy array (m+1 by number of equations in system) with columns being independent variable, and consecutive y,y'',y'''
    along the partition of the interval
    """
    n=len(x0)
    h = (b - a) / m
    y = np.zeros((m + 1, n))
    y[0] = x0
    x = np.arange(a, b + h, h)
    tabela = np.zeros((m + 1, n + 1))
    tabela[0] = np.array([x[0], y[0][0], y[0][1]])
    for i in range(m):
        k1 = f(x[i], y[i])
        k2 = f(x[i] + h / 2, y[i] + k1 * h / 2)
        k3 = f(x[i] + h / 2, y[i] + k2 * h / 2)
        k4 = f(x[i] + h, y[i] + k3 * h)
        k = (k1 + 2 * (k2 + k3) + k4) / 6
        y[i + 1] = y[i] + h * k
        tabela[i + 1] = np.array([x[i + 1], y[i + 1][0], y[i + 1][1]])
    return tabela

#Defining the problem
a=0.
b=np.pi
x0=[0.,1.]
m=1000

tabela = RK(a,b,x0,m)

tabela_data={
    't_i':tabela[:,0],
    'x_i': tabela[:,1],
    'dx_i':tabela[:,2]
}
tabela_frame= pd.DataFrame(tabela_data)
print(tabela_frame)

plt.plot(tabela[:,0],tabela[:,1])
plt.xlabel('t')
plt.ylabel('x(t) ')
plt.grid(True)
plt.show()
